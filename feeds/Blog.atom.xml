<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex P. Gates</title><link href="http://alexpgates.com/" rel="alternate"></link><link href="http://alexpgates.com/feeds/blog.atom.xml" rel="self"></link><id>http://alexpgates.com/</id><updated>2013-11-17T00:00:00-06:00</updated><entry><title>Scanning Colors to Philips Hue</title><link href="http://alexpgates.com/blog/2013/11/scanning-colors-to-hue.html" rel="alternate"></link><updated>2013-11-17T00:00:00-06:00</updated><author><name>Alex P. Gates</name></author><id>tag:alexpgates.com,2013-11-17:blog/2013/11/scanning-colors-to-hue.html</id><summary type="html">&lt;div class="videoWrapper"&gt;
&lt;iframe src="//player.vimeo.com/video/79212881?title=0&amp;amp;byline=0&amp;amp;portrait=0" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3&gt;What is&amp;nbsp;this?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/alexpgates/color-scan"&gt;color-scan&lt;/a&gt; grabs the dominant color(s) from images and passes the color(s) to &lt;a href="https://www.meethue.com/en-US"&gt;Philips Hue lights&lt;/a&gt;. You can decide if you want to send the main color to a group of lights, or individual colors to individual lights. It also works with scanned photos, of course, or with any jpeg that you drop in the directory. You don&amp;#8217;t actually &lt;em&gt;need&lt;/em&gt; the&amp;nbsp;scanner.&lt;/p&gt;
&lt;p&gt;You can can decide whether you want the main dominant color on all your lights &lt;code&gt;$color_mode = 'single';&lt;/code&gt;, or if you&amp;#8217;d like to grab a palette of colors to send to individual bulbs &lt;code&gt;$color_mode = 'multi';&lt;/code&gt;. The example in the video demonstrates using the &amp;#8220;single&amp;#8221; color&amp;nbsp;mode.&lt;/p&gt;
&lt;h3&gt;How does it&amp;nbsp;work?&lt;/h3&gt;
&lt;p&gt;When the process script is called, it grabs the latest image from a directory. Color Thief handles the color quantization and provides &lt;span class="caps"&gt;RGB&lt;/span&gt; colors. &lt;span class="caps"&gt;RGB&lt;/span&gt; is converted to the the xy color space, then sent to your Hue&amp;nbsp;bridge.&lt;/p&gt;
&lt;h3&gt;Where can I get&amp;nbsp;this?&lt;/h3&gt;
&lt;p&gt;Please &lt;a href="https://github.com/alexpgates/color-scan"&gt;fork it&lt;/a&gt; from&amp;nbsp;GitHub!&lt;/p&gt;
&lt;h3&gt;How do the settings&amp;nbsp;work?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;$color_mode = &amp;#39;multi&amp;#39;; // &amp;quot;multi&amp;quot; or &amp;quot;single&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;// &amp;quot;multi&amp;quot; uses different colors for each light (defined in $light_ids), &lt;/span&gt;
&lt;span class="x"&gt;// &amp;quot;single&amp;quot; uses the most dominant color found in the image for a Hue group (defined in $group_id)&lt;/span&gt;

&lt;span class="x"&gt;$light_ids = array( 1, 2, 3 ); &lt;/span&gt;
&lt;span class="x"&gt;// ids of your Hue lights that you want to use with color-scan&lt;/span&gt;
&lt;span class="x"&gt;// Grab these from your bridge. http://developers.meethue.com/1_lightsapi.html&lt;/span&gt;

&lt;span class="x"&gt;$brightness = 150;&lt;/span&gt;
&lt;span class="x"&gt;// 0 - 255 http://developers.meethue.com/1_lightsapi.html&lt;/span&gt;

&lt;span class="x"&gt;$group_id = 0; &lt;/span&gt;
&lt;span class="x"&gt;// must be set  if using single color mode;&lt;/span&gt;
&lt;span class="x"&gt;// Grab this from your bridge. http://developers.meethue.com/2_groupsapi.html&lt;/span&gt;

&lt;span class="x"&gt;$path = &amp;quot;/path/to/your/images/&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;// directory where you want to look for an image to process&lt;/span&gt;

&lt;span class="x"&gt;$bridge = &amp;#39;x.x.x.x&amp;#39;; &lt;/span&gt;
&lt;span class="x"&gt;// ip address of your internal bridge&lt;/span&gt;

&lt;span class="x"&gt;$hue_key = &amp;#39;hue-user&amp;#39;; &lt;/span&gt;
&lt;span class="x"&gt;// valid api user&lt;/span&gt;

&lt;span class="x"&gt;//$debug = &amp;#39;debug&amp;#39;; // uncomment this for some debug info&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;small&gt;*Note: color-scan doesn&amp;#8217;t handle registering a user on your bridge. You&amp;#8217;ll need to handle that &lt;a href="http://developers.meethue.com/4_configurationapi.html"&gt;on your own&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;How do I use&amp;nbsp;this?&lt;/h3&gt;
&lt;p&gt;After adjusting the settings to fit your Hue setup, drop a jpeg in the directory you defined in &lt;code&gt;$path&lt;/code&gt;. Then run&amp;nbsp;process.php.&lt;/p&gt;
&lt;h3&gt;Why did you make this (totally useless)&amp;nbsp;thing?&lt;/h3&gt;
&lt;p&gt;For fun, of course! I wanted to build something that would allow me to scan an image (or a piece of paper with some color) and have my lights change to match the dominant color(s) in the scanned&amp;nbsp;image.&lt;/p&gt;
&lt;p&gt;I pulled that all together with color-scan + the addition of a folder action in &lt;span class="caps"&gt;OS&lt;/span&gt; X that runs process.php when a new file is added to the directory I defined in $path. I have a profile in the Fujitsu settings that dumps new images in this directory, so it&amp;#8217;s all triggered by pressing the button on my&amp;nbsp;scanner.&lt;/p&gt;
&lt;p&gt;&lt;img alt="'OS X Folder Action setup'" src="https://dl.dropboxusercontent.com/u/2227623/blog-images/XNMDVF-Screen_Shot_2013-11-22_at_3.03.28_PM.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Can&amp;#8217;t you already do this with digital images and the Hue&amp;nbsp;app?&lt;/h3&gt;
&lt;p&gt;Yes. But I just got this fancy new scanner and I wanted to hook it up to my light&amp;nbsp;bulbs!&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This uses a &lt;a href="https://github.com/ksubileau/color-thief-php"&gt;color-thief-php&lt;/a&gt; by &lt;a href="http://kevinsubileau.fr"&gt;Kevin Subileau&lt;/a&gt;, which is a port of &lt;a href="https://github.com/lokesh/color-thief," title="Color Thief"&gt;Color Thief&lt;/a&gt; written by &lt;a href="http://lokeshdhakar.com/"&gt;Lokesh&amp;nbsp;Dhakar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; (Only tested in 5.3.6) with&amp;nbsp;cURL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;License&lt;/h3&gt;
&lt;p&gt;color-scan is &lt;span class="caps"&gt;MIT&lt;/span&gt;&amp;nbsp;licensed.&lt;/p&gt;
&lt;p&gt;Color Thief has it&amp;#8217;s own license, so check &lt;a href="https://github.com/lokesh/color-thief"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/ksubileau/color-thief-php"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="Philips Hue"></category><category term="php"></category><category term="color quantization"></category></entry><entry><title>“Hello world! … Hello world!” with annyang.js &amp; speak.js</title><link href="http://alexpgates.com/blog/2013/09/annyang-js-and-speak-js.html" rel="alternate"></link><updated>2013-09-19T00:00:00-05:00</updated><author><name>Alex P. Gates</name></author><id>tag:alexpgates.com,2013-09-19:blog/2013/09/annyang-js-and-speak-js.html</id><summary type="html">&lt;p&gt;&lt;a href="http://velvetcache.org"&gt;Hobbs&lt;/a&gt; sent me a link to &lt;a href="https://www.talater.com/annyang/"&gt;annyang.js&lt;/a&gt; by &lt;a href="https://github.com/TalAter"&gt;Tal Ater&lt;/a&gt; because he thought it&amp;#8217;d be right up my alley. (He&amp;#8217;s right! It is! And it&amp;#8217;s not just for the &lt;a href="https://twitter.com/talater/status/380059244017356800"&gt;Arrested Development reference&lt;/a&gt;!)&lt;/p&gt;
&lt;h3&gt;annyang.js&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.talater.com/annyang/"&gt;Annyang&lt;/a&gt; is &amp;#8220;a tiny javascript library that lets your users control your site with voice commands.&amp;#8221; It can do a lot for weighing in less than 1k. Annyang uses browser-based WebSpeech APIs and your computers microphone to translate speech-to-text and respond according to your commands. Annyang handles some pretty complex commands using variables, wildcards, optional ignoring, etc. There&amp;#8217;s a lot of great possibilities with annyang, and when I have some extra time I plan on using it to control a set of &lt;a href="https://www.meethue.com"&gt;Hue lights&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t have a lot of extra play time at the moment, but I wanted to quickly throw something together to try&amp;nbsp;annyang. &lt;/p&gt;
&lt;h3&gt;speak.js&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/kripken/speak.js/"&gt;Speak.js&lt;/a&gt;, by &lt;a href="https://github.com/kripken"&gt;Alon Zakai&lt;/a&gt; is a javascript port of the eSpeak speech synthesizer. Speak.js enables text-to-speech in the browser using JavaScript and&amp;nbsp;&lt;span class="caps"&gt;HTML5&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Putting them&amp;nbsp;together&lt;/h3&gt;
&lt;p&gt;Combining annyang.js and speak.js seemed like fun, so I created &lt;a href="http://webjam.org/speak/" target="_blank"&gt;a little demo&lt;/a&gt;. Annyang.js listens to what you say, and speak.js repeats it back to&amp;nbsp;you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;speakClient.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;annyang.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    if (annyang) {

      var sayThis = function(repeat) {
        speak(repeat);
      }

      // Let&amp;#39;s define a command.
      var commands = {
        &amp;#39;*repeat&amp;#39;: sayThis
      };

      // Turn on debugging for the console
      annyang.debug();

      // Initialize annyang with our commands
      annyang.init(commands);

      // Start listening.
      annyang.start();
    }
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, we begin by checking to see if annyang will work in this browser. If so, we define a function called &lt;code&gt;sayThis&lt;/code&gt; that takes the output from our wildcard variable in annyong called &lt;code&gt;*repeat&lt;/code&gt; and uses the speak.js function &lt;code&gt;speak()&lt;/code&gt; to output a .wav file to &lt;code&gt;&amp;lt;div id="audio"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://webjam.org/speak/" target="_blank"&gt;Try the demo&amp;nbsp;&amp;raquo;&lt;/a&gt;&lt;/p&gt;</summary><category term="Javascript"></category></entry><entry><title>What’s Under the Hood?</title><link href="http://alexpgates.com/blog/2013/06/whats-under-the-hood.html" rel="alternate"></link><updated>2013-06-22T00:00:00-05:00</updated><author><name>Alex P. Gates</name></author><id>tag:alexpgates.com,2013-06-22:blog/2013/06/whats-under-the-hood.html</id><summary type="html">&lt;p&gt;Many months ago, &lt;a href="http://christopherkollars.com"&gt;a buddy&lt;/a&gt; sent me &lt;a href="http://kylerush.net/blog/meet-the-obama-campaigns-250-million-fundraising-platform/"&gt;this article&lt;/a&gt; written by &lt;a href="http://kylerush.net/"&gt;Kyle Rush&lt;/a&gt; about the technology stack behind the Obama campaign&amp;#8217;s fundraising platform. Kyle mentioned &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, a static site generator written in Ruby, and recommended giving it a whirl to create fast, simple websites without the need for a bloated&amp;nbsp;&lt;span class="caps"&gt;CMS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not a Ruby guy, and despite making an attempt to get things working properly on my Mac, I backed out of the rabbit hole and instead decided to give &lt;a href="http://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt; a try. It&amp;#8217;s written in Python, and uses the &lt;a href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt; templating&amp;nbsp;language.  &lt;/p&gt;
&lt;p&gt;To get up and running, I followed &lt;a href="http://martinbrochhaus.com/pelican.html"&gt;this&lt;/a&gt; handy (but now outdated) guide by &lt;a href="http://martinbrochhaus.com"&gt;Martin Brochhaus&lt;/a&gt;. &lt;small&gt;(Note: Here&amp;#8217;s Martin&amp;#8217;s &lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;updated guide&lt;/a&gt;.)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;After getting everything configured and deployed to &lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;, I started working on an &lt;em&gt;ugly&lt;/em&gt; theme based off the default Pelican template. I never finished it. Then, &lt;a href="http://whatcheer.com"&gt;What Cheer&lt;/a&gt; announced our &lt;a href="http://whatcheer.com/pack/"&gt;transition&lt;/a&gt; to &lt;a href="http://packlove.com"&gt;Pack&lt;/a&gt;, and things got pretty busy for a&amp;nbsp;while.&lt;/p&gt;
&lt;h3&gt;Fast-forward six&amp;nbsp;months&lt;/h3&gt;
&lt;p&gt;I picked things up again a couple weeks ago after reading about the &lt;a href="http://blog.getpelican.com/pelican-3.2-released.html"&gt;updates&lt;/a&gt; to Pelican. I began piecing together this current theme using &lt;a href="http://twitter.github.io/bootstrap/"&gt;Bootstrap&lt;/a&gt;. (I haven&amp;#8217;t worked with any other front-end frameworks, but I&amp;#8217;ve been using it on &lt;a href="http://news.packlove.com/admin/"&gt;some stuff&lt;/a&gt; I&amp;#8217;m building with Pack, and also a &lt;a href="http://yearbooks.edison-pta.org"&gt;Yearbook project&lt;/a&gt; for the &lt;span class="caps"&gt;PTA&lt;/span&gt;.) I like it. Since the bulk of my front-end development happened between 1996 and 2004, it&amp;#8217;s allowed me get back in the game pretty&amp;nbsp;quickly.&lt;/p&gt;
&lt;h3&gt;A complete list of&amp;nbsp;tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt; - A static site generator written in&amp;nbsp;Python&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt; - A templating language for Python used to create Pelican&amp;nbsp;themes&lt;/li&gt;
&lt;li&gt;&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; - A lightweight markup language to quickly write&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;&lt;a href="http://twitter.github.io/bootstrap/"&gt;Bootstrap&lt;/a&gt; - A  front-end framework - helpful for responsive&amp;nbsp;development&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.google.com/fonts/"&gt;Google Fonts&lt;/a&gt; - For nicer&amp;nbsp;fonts&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; - For syntax&amp;nbsp;highlighting&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-typogrify"&gt;Typogrify&lt;/a&gt; - To fancy up the text a&amp;nbsp;bit&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.fabfile.org/en/1.6/"&gt;Fabric&lt;/a&gt; - To streamline&amp;nbsp;deployment&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt; - Fast, reliable&amp;nbsp;hosting &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The&amp;nbsp;process&lt;/h3&gt;
&lt;h4&gt;Install&amp;nbsp;Pelican&lt;/h4&gt;
&lt;p&gt;Again, here&amp;#8217;s Martin Brochhaus&amp;#8217; &lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;updated guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Create your first&amp;nbsp;post&lt;/h4&gt;
&lt;p&gt;Include your metadata at the top. &lt;small&gt;(More &lt;a href="http://docs.getpelican.com/en/latest/getting_started.html#writing-content-using-pelican"&gt;here&lt;/a&gt;)&lt;/small&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: What&amp;#39;s Under the Hood?
Date: 2013-06-22
Summary: From Markdown to static HTML, by way of Pelican, Jinja2, Bootstrap, and more.
Slug: whats-under-the-hood
Tags: Pelican, Boostrap, Github

Many months ago, [a buddy](http://christopherkollars.com) sent me ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Preview!&lt;/h4&gt;
&lt;p&gt;I use two separate config files for Pelican. One uses relative URLs (so I can preview locally), and the other generates absolute URLs for production. To avoid typing the full Pelican commands to generate the output, I use this&amp;nbsp;fabfile.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Fabric tasks for generating &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
from __future__ import with_statement

from fabric.api import lcd, &lt;span class="nb"&gt;local&lt;/span&gt;, settings

def pub&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Re-generates the output using absolute urls.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican . -o ../ -s settings.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

def dev&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Re-generates the output using relative urls.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican . -o ../ -s local_settings.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Preview&amp;nbsp;locally&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fab dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I check it out on my local&amp;nbsp;vhost.&lt;/p&gt;
&lt;h4&gt;Deploy&lt;/h4&gt;
&lt;p&gt;If everything looks okay, I generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; with absolute&amp;nbsp;URLs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fab pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then simply commit my changes to&amp;nbsp;Github.&lt;/p&gt;
&lt;h3&gt;So far, so&amp;nbsp;good&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m the kind of guy who will spend 15 hours hacking my Wii to play 15 minutes of old &lt;span class="caps"&gt;NES&lt;/span&gt; games. I&amp;#8217;m optimistic that an easy, fast, and fun way to manage a new blog will encourage me to get my act together and finally start writing somewhat&amp;nbsp;regularly.&lt;/p&gt;
&lt;h3&gt;Get the&amp;nbsp;theme&lt;/h3&gt;
&lt;p&gt;Fork the current version of this theme on &lt;a href="https://github.com/alexpgates/alexpgates.github.com/tree/master/themes/apg"&gt;github&lt;/a&gt;. It really wasn&amp;#8217;t built with with sharing in mind, but you&amp;#8217;re free to use what you&amp;nbsp;can!&lt;/p&gt;</summary><category term="Pelican"></category><category term="Boostrap"></category><category term="Github"></category></entry></feed>